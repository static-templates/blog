[
  {
    "title": "Simple Page-Based Routing for your Static Website",
    "excerpt": "Page-based routing is a routing system where each route in a website is mapped to a specific file within a pages directory. This means that creating a new page is as simple as adding a new file or folder to the pages directory.",
    "coverImage": "/assets/images/posts/cover.webp",
    "date": "2023-03-16T05:35:07.322Z",
    "dateFormatted": "March 16th 2023",
    "authorName": "Jake Simpson",
    "authorPicture": "/assets/images/authors/jake.jpg",
    "ogImageUrl": "/assets/images/posts/cover.webp",
    "content": "Ahoy there, fellow developers! Gather 'round as I spin you a yarn about the wonders of page-based routing. In this digital age, where websites are as common as tumbleweeds in the Wild West, page-based routing is the trusty steed that will guide you through the vast expanse of the internet.\n\n## Creating New Pages with Ease\n\nPicture this: you're building a static site, and you want to create a new page. With page-based routing, it's as easy as lassoing a wild stallion. All you need to do is add a new file or folder to the pages directory, and voila! A new route is born. Just like that, your website gains a new page, ready to be explored by eager visitors.\n\n## Getting Started with Page-Based Routing\n\nNow, let me walk you through the steps of using page-based routing. You have two options to get started. You can either run the `static new folder-name` command, which will create a new folder with the necessary files, or you can create a pages directory in an empty folder. Whichever path you choose, the result is the same: a world of possibilities at your fingertips.\n\n## Mapping Pages to Routes\n\nEach file within the pages directory corresponds to a route on your website. It's like having a map of the digital frontier, with each page marked by a trail. For example, if you have an `about.html` file in the pages directory, it will create a route for the `/about` page. It's as simple as staking claim to a piece of land and giving it a name.\n\n## Organizing Your Routes and Pages\n\nBut wait, there's more! Page-based routing offers a wagonload of benefits. It brings order to the chaos of your routes and pages, making it easier to navigate and maintain your site. No more wandering aimlessly through the vast plains of code. With page-based routing, you can corral your pages into neat folders and subfolders, creating a harmonious structure that even the most seasoned cowboy would envy.\n\n## The Power of Static\n\nAnd that's not all, folks! Page-based routing is just one of the many features offered by the Static framework. It's like having a trusty sidekick by your side, ready to lend a hand. The Static framework also offers layouts, includes, TailwindCSS integration, and collections. It's a whole arsenal of tools to help you tame the wild west of web development.\n\nSo saddle up, my friends, and embark on a journey through the world of page-based routing. With its simplicity and power, you'll be able to conquer the digital frontier and create websites that will leave a lasting impression. Remember, the pages are your trails, and the pages directory is your map. Happy coding, pardners!",
    "link": "/posts/page-based-routing"
  },
  {
    "title": "Learn how to use layouts to structure your pages",
    "excerpt": "Static layouts are HTML templates that can be used to structure and style the pages of your website. They provide a consistent design and layout across multiple pages. They provide a consistent design and layout across multiple pages.",
    "coverImage": "/assets/images/posts/cover2.webp",
    "date": "2023-03-17T05:35:07.322Z",
    "dateFormatted": "March 17th 2023",
    "authorName": "Sandra Baker",
    "authorPicture": "/assets/images/authors/sandra.jpg",
    "ogImageUrl": "/assets/images/posts/cover2.webp",
    "content": "let's embark on a journey to explore the wonders of includes and how they can revolutionize the way you structure your website.\n\nIncludes are like the unsung heroes of web development. They are HTML snippets that can be reused throughout your site, allowing you to create consistent layouts and styles across multiple pages. Imagine having a navigation bar, a footer, or a hero section that you want to use on every page of your website. Instead of copying and pasting the same code over and over again, includes come to the rescue.\n\nTo demonstrate the power of includes, let's take a look at an example. Suppose you have a file called message.html located in the includes directory. This file contains a simple message snippet that you want to reuse on multiple pages:\n\n```html\n<p>This is just a simple message snippet that can be re-used inside of any page</p>\n```\n\nNow, let's say you have a page where you want to include this message snippet. You can simply use the `<include></include>` tags and specify the source file, like so:\n\n```html\n<layout title=\"This is the title of the page\" src=\"main.html\">\n    <include src=\"message.html\"></include>\n</layout>\n```\n\nWhen the page is rendered, the output will include the message snippet:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>This is the title of the page</title>\n    <style>[x-cloak]{ display:none; }</style>\n    {tailwindcss}\n</head>\n<body>\n    <p>This is just a simple message snippet that can be re-used inside of any page</p>\n    <script src=\"/assets/js/main.js\"></script>\n</body>\n</html>\n```\n\nAs you can see, the message snippet is seamlessly included in the page, providing a consistent element across your website.\n\nBut what about the `{tailwindcss}` you see in the code? Well, that's where the magic of the Static framework comes into play. Static allows you to inject Tailwind CSS into your website and render the minified version in the final build. This ensures that your website not only has consistent layouts but also benefits from the power of Tailwind CSS.\n\nTo learn more about Static and how to use includes, you can refer to the official documentation here.\n\nIn conclusion, includes are a game-changer when it comes to creating consistent layouts in your website. By reusing HTML snippets, you can save time, reduce code duplication, and maintain a cohesive design across your pages. So embrace the power of includes and let your website shine with consistent brilliance!\n\n> Note: The code snippets and examples provided in this blog post are for illustrative purposes only. Please refer to the official documentation of Static for accurate implementation details.",
    "link": "/posts/layouts"
  },
  {
    "title": "Learn how to re-use HTML snippets with Includes",
    "excerpt": "Includes are HTML snippets that can be reused throughout a website. They are stored in the \"includes\" directory and can include components like navigations, footers, and hero sections.",
    "coverImage": "/assets/images/posts/cover3.webp",
    "date": "2023-03-18T05:35:07.322Z",
    "dateFormatted": "March 18th 2023",
    "authorName": "Carl Peterson",
    "authorPicture": "/assets/images/authors/carl.jpg",
    "ogImageUrl": "/assets/images/posts/cover3.webp",
    "content": "Ahoy there, fellow developers! Today, we embark on a delightful journey into the enchanting realm of Includes in Static. Prepare to be amazed as we uncover the secrets of code reusability and witness the power of HTML snippets that can be reused throughout your website.\n\n## Setting Sail: What are Includes?\n\nIncludes, my dear friends, are like magical snippets of HTML that can be reused across your entire website. They reside in the mystical \"includes\" directory, ready to be summoned whenever you need them. These snippets can be anything your heart desires - navigations, footers, hero sections, and more. With includes, you can wave goodbye to repetitive code and embrace the wonders of efficiency and simplicity.\n\n## Unveiling the Magic: How to Use Includes\n\nUsing includes is as easy as pie! Just imagine yourself as a sorcerer, summoning the powers of code reuse. To include an HTML snippet in a page, simply enclose it within the <include></include> tags. Voila! The snippet will be seamlessly integrated into your page, spreading its charm and saving you precious time.\n\n## A Tale of Reusability: The Adventures of a Message Snippet\n\nLet me regale you with a tale of a humble message snippet, a snippet that could be reused across any page. Imagine a snippet nestled in the includes/message.html file, whispering its wisdom to all who encounter it:\n\n```html\n<p>This is just a simple message snippet that can be re-used inside of any page</p>\n```\n\nNow, picture yourself in a page, yearning to include this snippet. Fear not, for it is a breeze! Just use the <include src=\"message.html\"></include> incantation within your page, and behold the magic unfold.\n\n## The Grand Finale: A Symphony of Code and Creativity\n\nAs the final act of this enchanting journey, let us witness the culmination of our efforts. When your page is rendered, the HTML gods will weave their spell, and the output shall be a masterpiece. The snippet, once a mere fragment, will now be harmoniously integrated into the page, spreading its message far and wide.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{title}</title>\n    <style>[x-cloak]{ display:none; }</style>\n    {tailwindcss}\n</head>\n<body>\n    <p>This is just a simple message snippet that can be re-used inside of any page</p>\n    <script src=\"/assets/js/main.js\"></script>\n</body>\n</html>\n```\n\n# Conclusion: Embrace the Magic of Includes\n\nAnd so, dear developers, we reach the end of our whimsical journey into the world of includes in Static. We have witnessed the power of code reusability, the joy of efficient development, and the wonders of simplicity. Embrace the magic of includes, and let your code soar to new heights of elegance and efficiency.",
    "link": "/posts/includes"
  }
]